// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: organizations.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const createOrganization = `-- name: CreateOrganization :one
INSERT INTO organizations (id, name, description, settings) 
VALUES ($1, $2, $3, COALESCE($4, '{}'))
RETURNING id, name, description, settings, created_at, updated_at, deleted_at
`

type CreateOrganizationParams struct {
	ID          uuid.UUID
	Name        string
	Description sql.NullString
	Column4     interface{}
}

func (q *Queries) CreateOrganization(ctx context.Context, arg CreateOrganizationParams) (Organization, error) {
	row := q.db.QueryRowContext(ctx, createOrganization,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Column4,
	)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Settings,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getAllOrganizations = `-- name: GetAllOrganizations :many
SELECT id, name, description, settings, created_at, updated_at, deleted_at FROM organizations WHERE deleted_at IS NULL
`

func (q *Queries) GetAllOrganizations(ctx context.Context) ([]Organization, error) {
	rows, err := q.db.QueryContext(ctx, getAllOrganizations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organization
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Settings,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrganizationByID = `-- name: GetOrganizationByID :one
SELECT id, name, description, settings, created_at, updated_at, deleted_at FROM organizations WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetOrganizationByID(ctx context.Context, id uuid.UUID) (Organization, error) {
	row := q.db.QueryRowContext(ctx, getOrganizationByID, id)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Settings,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getOrganizationByName = `-- name: GetOrganizationByName :one
SELECT id, name, description, settings, created_at, updated_at, deleted_at FROM organizations WHERE name = $1 AND deleted_at IS NULL
`

func (q *Queries) GetOrganizationByName(ctx context.Context, name string) (Organization, error) {
	row := q.db.QueryRowContext(ctx, getOrganizationByName, name)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Settings,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const hardDeleteOrganization = `-- name: HardDeleteOrganization :one
DELETE FROM organizations WHERE id = $1
RETURNING id, name, description, settings, created_at, updated_at, deleted_at
`

func (q *Queries) HardDeleteOrganization(ctx context.Context, id uuid.UUID) (Organization, error) {
	row := q.db.QueryRowContext(ctx, hardDeleteOrganization, id)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Settings,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const softDeleteOrganization = `-- name: SoftDeleteOrganization :one
UPDATE organizations
SET deleted_at = NOW()
WHERE id = $1
RETURNING id, name, description, settings, created_at, updated_at, deleted_at
`

func (q *Queries) SoftDeleteOrganization(ctx context.Context, id uuid.UUID) (Organization, error) {
	row := q.db.QueryRowContext(ctx, softDeleteOrganization, id)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Settings,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateOrganization = `-- name: UpdateOrganization :one
UPDATE organizations
SET name = CASE 
    WHEN $2 != '' THEN $2 
    ELSE name 
END,
description = COALESCE($3, description),
settings = COALESCE($4, settings),
updated_at = NOW()
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, name, description, settings, created_at, updated_at, deleted_at
`

type UpdateOrganizationParams struct {
	ID          uuid.UUID
	Column2     interface{}
	Description sql.NullString
	Settings    pqtype.NullRawMessage
}

func (q *Queries) UpdateOrganization(ctx context.Context, arg UpdateOrganizationParams) (Organization, error) {
	row := q.db.QueryRowContext(ctx, updateOrganization,
		arg.ID,
		arg.Column2,
		arg.Description,
		arg.Settings,
	)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Settings,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
